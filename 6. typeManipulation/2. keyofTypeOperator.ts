// предположим нам надо создать литеральное объединение из ключей объекта
// нам в этом поможет оператор keyof

type Point = {
  x: number;
  y: number;
};

type P = keyof Point; // type = "x" | "y"

// если у объекта есть индексная подпись то он использует тип этой индексной подписи

type foo = {
  [n: number]: string;
};

type fooKey = keyof foo; //type fooKey = number

type bar = {
  [n: string]: string;
};

type barKey = keyof bar; //type barKey = string | number

// как видим если мы создали строковую индексную подпись 
// то он создаёт тип из сторки и числа 
// потому что все ключи в виде чисел по итогу превращаются в строки


// keyof типы становятся особенно полезными в сочетании с отображенными типами, о которых мы подробнее узнаем позже.